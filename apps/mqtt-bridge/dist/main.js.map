{"version":3,"file":"main.js","mappings":"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","sources":["webpack://lawn-man-mono/./apps/mqtt-bridge/config.ts","webpack://lawn-man-mono/./apps/mqtt-bridge/src/environments/environment.prod.ts","webpack://lawn-man-mono/external commonjs \"aws-sdk\"","webpack://lawn-man-mono/external commonjs \"mqtt\"","webpack://lawn-man-mono/external commonjs \"tslib\"","webpack://lawn-man-mono/webpack/bootstrap","webpack://lawn-man-mono/./apps/mqtt-bridge/src/main.ts"],"sourcesContent":["export const config = {\n    region: 'ap-southeast-2',\n    mqttServer: 'mqtt://mqtt:1883',\n    mqttUsername: 'juicebox',\n    mqttPassword: 'dY*t7LSgGhc%M4',\n    snsTopicArn: 'arn:aws:sns:ap-southeast-2:739766728346:mqttBridge',\n    mqttBridgeUserArn: 'arn:aws:iam::739766728346:user/mqttBridge',\n    mqttBridgeUserId: 'AKIA2YPMIO2NDZUVGPEP',\n    mqttBridgeUserSecret: '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',\n}\n","export const environment = {\n    production: true,\n    mqttServer: 'mqtt://mqtt:1883',\n}\n","module.exports = require(\"aws-sdk\");","module.exports = require(\"mqtt\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import AWS from 'aws-sdk'\nimport mqtt from 'mqtt'\n\nimport { config } from '../config'\nimport { environment } from './environments/environment.prod'\n\nAWS.config.update({\n    region: config.region,\n    accessKeyId: config.mqttBridgeUserId,\n    secretAccessKey: config.mqttBridgeUserSecret,\n})\n\nconst clientId = `mqtt_bridge_${Math.random().toString(16).slice(3)}`\n\nconst client = mqtt.connect(environment.mqttServer, {\n    clientId,\n    clean: true,\n    username: config.mqttUsername,\n    password: config.mqttPassword,\n    // connectTimeout: 5,\n    reconnectPeriod: 1000,\n})\n\nconsole.log('STARTED SERICE ON :: ', environment.mqttServer)\n\n// SNS message publisher\nasync function publishMessage(msg: unknown) {\n    try {\n        return new AWS.SNS({ apiVersion: '2010-03-31' })\n            .publish({\n                Message: JSON.stringify(msg),\n                TopicArn: config.snsTopicArn,\n            })\n            .promise()\n    } catch (err) {\n        console.error(err)\n    }\n}\n\n// Connect MQTT client\n\nclient.on('connect', () => {\n    client.subscribe('juicebox1/#', (err) => {\n        if (!err) {\n            console.log('MQTT Bridge Connected')\n            client.publish('juicebox1', 'Bridge Online')\n        } else {\n            console.error('Failed to connect :: ', err)\n        }\n    })\n})\n\n// Watch MQTT for messages and Publish message to SNS topic\nclient.on('message', async (topic, message) => {\n    if (!topic.includes('debug')) {\n        const msg = {\n            topic: topic,\n            payload: message.toString(),\n        }\n        const msgInfo = await publishMessage(JSON.stringify(msg, null, 4))\n        console.log('Message published to SNS topic :: ', msgInfo?.MessageId)\n        console.log(msg)\n    }\n})\n\n// Error Handling\nclient.on('error', (err) => {\n    console.error(err)\n})\n\nclient.on('reconnect', () => {\n    console.log('reconnecting!')\n})\n"],"names":[],"sourceRoot":""}